name: Tests

on:
  pull_request:
    branches: [main]

env:
  SENDGRID_API_KEY: ${{ secrets.SENDGRID_API_KEY }}
  NODE_ENV: development
  EMAIL_ROOT_URL: ${{ secrets.EMAIL_ROOT_URL }}
  EMAIL_ROOT_URL_DEV: ${{ secrets.EMAIL_ROOT_URL_DEV }}
  PORT: ${{ secrets.PORT }}
  ORIGIN: ${{ secrets.ORIGIN }}
  POSTGRES_USER: ${{ secrets.POSTGRES_USER }}
  POSTGRES_PASSWORD: ${{ secrets.POSTGRES_PASSWORD }}
  POSTGRES_DB: ${{ secrets.POSTGRES_DB }}
  REDIS_URL: ${{ secrets.REDIS_URL }}
  ACCESS_TOKEN_EXPIRES_IN: ${{ secrets.ACCESS_TOKEN_EXPIRES_IN }}
  AUTH_SESSION_EXPIRATION: ${{ secrets.AUTH_SESSION_EXPIRATION }}
  PASSWORD_RESET_TOKEN_EXPIRES_IN: ${{ secrets.PASSWORD_RESET_TOKEN_EXPIRES_IN }}
  ACCOUNT_ACTIVATION_SESSION_EXPIRATION: ${{ secrets.ACCOUNT_ACTIVATION_SESSION_EXPIRATION }}
  TESTER_KEY: ${{ secrets.TESTER_KEY }}
  CYPRESS_TEST_USER_NAME: ${{ secrets.CYPRESS_TEST_USER_NAME }}
  ACCESS_TOKEN_PRIVATE_KEY: ${{ secrets.ACCESS_TOKEN_PRIVATE_KEY }}
  ACCESS_TOKEN_PUBLIC_KEY: ${{ secrets.ACCESS_TOKEN_PUBLIC_KEY }}
  REFRESH_TOKEN_PRIVATE_KEY: ${{ secrets.REFRESH_TOKEN_PRIVATE_KEY }}
  REFRESH_TOKEN_PUBLIC_KEY: ${{ secrets.REFRESH_TOKEN_PUBLIC_KEY }}
  PASSWORD_RESET_TOKEN_PRIVATE_KEY: ${{ secrets.PASSWORD_RESET_TOKEN_PRIVATE_KEY }}
  PASSWORD_RESET_TOKEN_PUBLIC_KEY: ${{ secrets.PASSWORD_RESET_TOKEN_PUBLIC_KEY }}
  ACCOUNT_ACTIVATION_TOKEN_PRIVATE_KEY: ${{ secrets.ACCOUNT_ACTIVATION_TOKEN_PRIVATE_KEY }}
  ACCOUNT_ACTIVATION_TOKEN_PUBLIC_KEY: ${{ secrets.ACCOUNT_ACTIVATION_TOKEN_PUBLIC_KEY }}
  CYPRESS_BACKEND_URL: ${{ secrets.CYPRESS_BACKEND_URL }}
  CYPRESS_TEST_USER_NAME_ALTERNATE: ${{ secrets.CYPRESS_TEST_USER_NAME_ALTERNATE }}
  CYPRESS_TEST_USER_EMAIL: ${{ secrets.CYPRESS_TEST_USER_EMAIL }}
  CYPRESS_TEST_USER_EMAIL_ALTERNATE: ${{ secrets.CYPRESS_TEST_USER_EMAIL_ALTERNATE }}
  CYPRESS_TEST_USER_PASSWORD: ${{ secrets.CYPRESS_TEST_USER_PASSWORD }}
  CYPRESS_TEST_USER_PASSWORD_ALTERNATE: ${{ secrets.CYPRESS_TEST_USER_PASSWORD_ALTERNATE }}
  CYPRESS_TESTER_KEY: ${{ secrets.CYPRESS_TESTER_KEY }}
  NEXT_PUBLIC_API: ${{ secrets.NEXT_PUBLIC_API }}
  NEXT_PUBLIC_SOCKET_API: ${{ secrets.NEXT_PUBLIC_SOCKET_API }}
  POSTGRES_CONNECTION_STRING_PRODUCTION: ${{ secrets.POSTGRES_CONNECTION_STRING_PRODUCTION }}
  POSTGRES_USER_PRODUCTION: ${{ secrets.POSTGRES_USER_PRODUCTION }}
  POSTGRES_PASSWORD_PRODUCTION: ${{ secrets.POSTGRES_PASSWORD_PRODUCTION }}
  POSTGRES_DB_PRODUCTION: ${{ secrets.POSTGRES_DB_PRODUCTION }}

jobs:
  jest-tests:
    runs-on: ubuntu-latest
    services:
      redis:
        image: redis
        ports:
          - 6379:6379
      postgres:
        image: postgres
        env:
          POSTGRES_USER: ${{ secrets.POSTGRES_USER }}
          POSTGRES_PASSWORD: ${{ secrets.POSTGRES_PASSWORD }}
          POSTGRES_DB: lucella-test
        options: >- # Set health checks to wait until postgres has started
          --health-cmd pg_isready
          --health-interval 10s
          --health-timeout 5s
          --health-retries 5
        ports:
          - 5432:5432

    steps:
      - uses: actions/checkout@v3
      - uses: actions/setup-node@v3
        with:
          node-version: 16.18.0
      - name: install yarn
        run: npm install --global yarn
      - name: install dependencies
        run: yarn install
      - name: install typescript
        run: npm install -g typescript
      - name: compile typescript
        run: cd packages/common && tsc && echo compiled common directory && cd ../server && tsc && echo compiled server directory && cd ../..
      - name: install protoc
        run: sudo apt update && sudo apt install -y unzip && curl -Lo protoc.zip "https://github.com/protocolbuffers/protobuf/releases/download/v3.19.6/protoc-3.19.6-linux-x86_64.zip" && sudo unzip -q protoc.zip bin/protoc -d /usr/local && sudo chmod a+x /usr/local/bin/protoc && protoc --version
      - name: compile .proto files to js
        run: cd packages/common && yarn run compile-proto && cd ../..
      - name: Run server tests and be done
        run: cd packages/server && yarn test --forceExit && echo completed
  cypress-run:
    runs-on: ubuntu-latest
    # services:
    #   redis:
    #     image: redis
    #     ports:
    #       - 6379:6379
    #   postgres:
    #     image: postgres
    #     env:
    #       POSTGRES_USER: ${{ secrets.POSTGRES_USER }}
    #       POSTGRES_PASSWORD: ${{ secrets.POSTGRES_PASSWORD }}
    #       POSTGRES_DB: lucella # note this is different than the lucella-test db used in the jest tests
    #     options: >- # Set health checks to wait until postgres has started
    #       --health-cmd pg_isready
    #       --health-interval 10s
    #       --health-timeout 5s
    #       --health-retries 5
    #     ports:
    #       - 5432:5432
    steps:
      - name: apt update
        run: sudo apt update
      - name: install chrome
        uses: browser-actions/setup-chrome@latest
      - uses: actions/setup-node@v3
        with:
          node-version: 16.18.0
      - name: install cypress dependencies
        run: sudo apt-get install libgtk2.0-0 libgtk-3-0 libgbm-dev libnotify-dev libgconf-2-4 libnss3 libxss1 libasound2 libxtst6 xauth xvfb
      - name: install wait-on
        run: npm install -g wait-on
      - uses: actions/checkout@v3
      - name: write cypress.env.json
        run: cd packages/client && echo '${{ secrets.CYPRESS_ENV_CI }}' > cypress.env.json
      - name: write env for docker compose
        run: echo '${{ secrets.DEV_ENV }}' > .env
      - name: run docker compose
        run: docker compose -f docker-compose.dev.yml up -d
      # - name: install yarn
      #   run: npm install --global yarn
      # - name: install curl
      #   run: sudo apt install curl
      # - name: install protoc
      #   run: sudo apt install -y unzip && curl -Lo protoc.zip "https://github.com/protocolbuffers/protobuf/releases/download/v3.19.6/protoc-3.19.6-linux-x86_64.zip" && unzip -q protoc.zip bin/protoc -d /usr/local && chmod a+x /usr/local/bin/protoc && protoc --version
      # - name: install dependencies
      #   run: yarn install
      # - name: install typescript
      #   run: npm install -g typescript
      # - name: compile typescript
      #   run: cd packages/common && tsc && echo compiled common directory && cd ../server && tsc && echo compiled server directory && cd ../..
      # - name: compile .proto files to js
      #   run: cd packages/common && yarn run compile-proto && cd ../..
      # - name: test psql migration command
      #   run: DATABASE_URL="postgres://${POSTGRES_USER}:${POSTGRES_PASSWORD}@localhost:5432/${POSTGRES_DB}" echo $DATABASE_URL
      - name: run the psql migrations
        run: cd packages/server && DATABASE_URL="postgres://${POSTGRES_USER}:${POSTGRES_PASSWORD}@localhost:5432/lucella" yarn run migrate up
      # - name: serve dev
      #   run: yarn dev & wait-on http://localhost:3000
      # - run: curl http://localhost:3000/login
      - name: cypress run
        run: cd packages/client && yarn cypress run --browser chrome --headless --record --key ${{ secrets.RECORDING_KEY_CYPRESS }}
